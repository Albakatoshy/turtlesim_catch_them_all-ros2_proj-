In file included from [01m[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33[m[K,
                 from [01m[K/usr/include/c++/11/bits/allocator.h:46[m[K,
                 from [01m[K/usr/include/c++/11/memory:64[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/ext/new_allocator.h: In instantiation of â€˜[01m[Kclass __gnu_cxx::new_allocator<example_interfaces::msg::String_<std::allocator<void> >()>[m[Kâ€™:
[01m[K/usr/include/c++/11/bits/allocator.h:124:11:[m[K   required from â€˜[01m[Kclass std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>[m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:995:27:[m[K   required from â€˜[01m[Kclass rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >[m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:425:49:[m[K   required from â€˜[01m[Kclass rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >[m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:216:5:[m[K   required by substitution of â€˜[01m[Ktemplate<class MessageT, class CallbackT, class AllocatorT, class SubscriptionT, class MessageMemoryStrategyT> std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = <missing>][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/ext/new_allocator.h:96:7:[m[K [01;31m[Kerror: [m[Kâ€˜[01m[Kconst _Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::const_reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::const_pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::const_reference = example_interfaces::msg::String_<std::allocator<void> > (&)()][m[Kâ€™ cannot be overloaded with â€˜[01m[K_Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::reference = example_interfaces::msg::String_<std::allocator<void> > (&)()][m[Kâ€™
   96 |       [01;31m[Kaddress[m[K(const_reference __x) const _GLIBCXX_NOEXCEPT
      |       [01;31m[K^~~~~~~[m[K
[01m[K/usr/include/c++/11/ext/new_allocator.h:92:7:[m[K [01;36m[Knote: [m[Kprevious declaration â€˜[01m[K_Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::reference = example_interfaces::msg::String_<std::allocator<void> > (&)()][m[Kâ€™
   92 |       [01;36m[Kaddress[m[K(reference __x) const _GLIBCXX_NOEXCEPT
      |       [01;36m[K^~~~~~~[m[K
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:[m[K In constructor â€˜[01m[KSubscriberTest::SubscriberTest()[m[Kâ€™:
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:14:65:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >::SharedPtr[m[Kâ€™ {aka â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >[m[Kâ€™} and â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >[m[Kâ€™)
   14 |             std::bind(&SubscriberTest::sub_callback , this ,_1) [01;31m[K)[m[K ;
      |                                                                 [01;31m[K^[m[K
In file included from [01m[K/usr/include/c++/11/memory:77[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
[01m[K/usr/include/c++/11/bits/shared_ptr.h:363:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  363 |         [01;36m[Koperator[m[K=(const shared_ptr<_Yp>& __r) noexcept
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:363:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/11/bits/shared_ptr.h: In substitution of â€˜[01m[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >&; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/shared_ptr.h:363:2:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:14:65:[m[K   required from here
[01m[K/usr/include/c++/11/bits/shared_ptr.h:130:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >&>[m[Kâ€™
  130 |         using [01;31m[K_Assignable[m[K = typename enable_if<
      |               [01;31m[K^~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:374:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  374 |         [01;36m[Koperator[m[K=(auto_ptr<_Yp>&& __r)
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:374:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:14:65:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >[m[Kâ€™ is not derived from â€˜[01m[Kstd::auto_ptr<_Up>[m[Kâ€™
   14 |             std::bind(&SubscriberTest::sub_callback , this ,_1) [01;36m[K)[m[K ;
      |                                                                 [01;36m[K^[m[K
In file included from [01m[K/usr/include/c++/11/memory:77[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
[01m[K/usr/include/c++/11/bits/shared_ptr.h:391:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  391 |         [01;36m[Koperator[m[K=(shared_ptr<_Yp>&& __r) noexcept
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:391:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/11/bits/shared_ptr.h: In substitution of â€˜[01m[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/shared_ptr.h:391:2:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Yp> std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:14:65:[m[K   required from here
[01m[K/usr/include/c++/11/bits/shared_ptr.h:130:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >&>[m[Kâ€™
  130 |         using [01;31m[K_Assignable[m[K = typename enable_if<
      |               [01;31m[K^~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:399:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  399 |         [01;36m[Koperator[m[K=(unique_ptr<_Yp, _Del>&& __r)
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:399:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:14:65:[m[K [01;36m[Knote: [m[K  â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >[m[Kâ€™ is not derived from â€˜[01m[Kstd::unique_ptr<_Tp, _Dp>[m[Kâ€™
   14 |             std::bind(&SubscriberTest::sub_callback , this ,_1) [01;36m[K)[m[K ;
      |                                                                 [01;36m[K^[m[K
In file included from [01m[K/usr/include/c++/11/memory:77[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
[01m[K/usr/include/c++/11/bits/shared_ptr.h:359:19:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  359 |       shared_ptr& [01;36m[Koperator[m[K=(const shared_ptr&) noexcept = default;
      |                   [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:359:29:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >[m[Kâ€™ to â€˜[01m[Kconst std::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >&[m[Kâ€™
  359 |       shared_ptr& operator=([01;36m[Kconst shared_ptr&[m[K) noexcept = default;
      |                             [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:383:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > >][m[Kâ€™
  383 |       [01;36m[Koperator[m[K=(shared_ptr&& __r) noexcept
      |       [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/shared_ptr.h:383:30:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >[m[Kâ€™ to â€˜[01m[Kstd::shared_ptr<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> > > >&&[m[Kâ€™
  383 |       operator=([01;36m[Kshared_ptr&& __r[m[K) noexcept
      |                 [01;36m[K~~~~~~~~~~~~~^~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>[m[Kâ€™})
  394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
      |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
[01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
 1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
      |               [01;31m[K^~~~~~~~~~~~~~~[m[K
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
 1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
 1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~[m[K
/usr/include/c++/11/variant: In instantiation of â€˜[01m[Kconstexpr bool std::holds_alternative(const std::variant<_Types ...>&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:53:[m[K   required from â€˜[01m[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_intra_process_buffer_type.hpp:40:57:[m[K   required from â€˜[01m[Krclcpp::IntraProcessBufferType rclcpp::detail::resolve_intra_process_buffer_type(rclcpp::IntraProcessBufferType, const rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>&) [with CallbackMessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:218:42:[m[K   required from â€˜[01m[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >][m[Kâ€™
[01m[K/usr/include/c++/11/ext/new_allocator.h:162:4:[m[K   required from â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:[m[K   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:[m[K   required from â€˜[01m[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1111:42:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: T must occur exactly once in alternatives
 1111 |       static_assert([01;31m[K__detail::__variant::__exactly_once<_Tp, _Types...>[m[K,
      |                     [01;31m[K~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1111:42:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kstd::__detail::__variant::__exactly_once<std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™ evaluates to false
/usr/include/c++/11/variant: In instantiation of â€˜[01m[Kconstexpr bool std::holds_alternative(const std::variant<_Types ...>&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:61:[m[K   required from â€˜[01m[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_intra_process_buffer_type.hpp:40:57:[m[K   required from â€˜[01m[Krclcpp::IntraProcessBufferType rclcpp::detail::resolve_intra_process_buffer_type(rclcpp::IntraProcessBufferType, const rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>&) [with CallbackMessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:218:42:[m[K   required from â€˜[01m[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >][m[Kâ€™
[01m[K/usr/include/c++/11/ext/new_allocator.h:162:4:[m[K   required from â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > > >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:[m[K   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:[m[K   required from â€˜[01m[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1111:42:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: T must occur exactly once in alternatives
[01m[K/usr/include/c++/11/variant:1111:42:[m[K [01;36m[Knote: [m[Kâ€˜[01m[Kstd::__detail::__variant::__exactly_once<std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™ evaluates to false
In file included from [01m[K/usr/include/c++/11/memory:76[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/bits/unique_ptr.h: In instantiation of â€˜[01m[Kvoid std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >()][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/unique_ptr.h:361:17:[m[K   required from â€˜[01m[Kstd::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Dp = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/usr/include/c++/11/bits/stl_construct.h:151:22:[m[K   required from â€˜[01m[Kconstexpr void std::_Destroy(_Tp*) [with _Tp = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/stl_construct.h:163:19:[m[K   required from â€˜[01m[Kstatic void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*; bool <anonymous> = false][m[Kâ€™
[01m[K/usr/include/c++/11/bits/stl_construct.h:196:11:[m[K   required from â€˜[01m[Kvoid std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*][m[Kâ€™
[01m[K/usr/include/c++/11/bits/alloc_traits.h:848:15:[m[K   required from â€˜[01m[Kvoid std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*; _Tp = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/stl_vector.h:680:15:[m[K   [ skipping 23 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:[m[K   required from â€˜[01m[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, example_interfaces::msg::String_<std::allocator<void> >(), example_interfaces::msg::String_<std::allocator<void> >(), rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >][m[Kâ€™
[01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:[m[K   required from here
[01m[K/usr/include/c++/11/bits/unique_ptr.h:85:16:[m[K [01;31m[Kerror: [m[Kcannot delete a function.  Only pointer-to-objects are valid arguments to â€˜[01m[Kdelete[m[Kâ€™
   85 |         delete [01;31m[K__ptr[m[K;
      |                [01;31m[K^~~~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp: In instantiation of â€˜[01m[Kstd::shared_ptr<void> rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::create_message() [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:311:3:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:317:53:[m[K [01;31m[Kerror: [m[Kcould not convert â€˜[01m[Krclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >::borrow_message()[m[Kâ€™ from â€˜[01m[Kshared_ptr<[01;32m[Kexample_interfaces::msg::String_<std::allocator<void> >()[m[K>[m[Kâ€™ to â€˜[01m[Kshared_ptr<[01;32m[Kvoid[m[K>[m[Kâ€™
  317 |     return message_memory_strategy_->borrow_message([01;31m[K)[m[K;
      |                                                     [01;31m[K^[m[K
      |                                                     [01;31m[K|[m[K
      |                                                     [01;31m[Kshared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>[m[K
/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp: In instantiation of â€˜[01m[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_loaned_message(void*, const rclcpp::MessageInfo&) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:364:3:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:374:26:[m[K [01;31m[Kerror: [m[Kinvalid â€˜[01m[Kstatic_cast[m[Kâ€™ from type â€˜[01m[Kvoid*[m[Kâ€™ to type â€˜[01m[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()[m[Kâ€™
  374 |     auto typed_message = [01;31m[Kstatic_cast<ROSMessageType *>(loaned_message)[m[K;
      |                          [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/c++/11/memory:77[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/bits/shared_ptr.h: In instantiation of â€˜[01m[Kstd::shared_ptr<_Tp> std::static_pointer_cast(const std::shared_ptr<_Tp>&) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Up = void][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:336:66:[m[K   required from â€˜[01m[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_message(std::shared_ptr<void>&, const rclcpp::MessageInfo&) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:327:3:[m[K   required from here
[01m[K/usr/include/c++/11/bits/shared_ptr.h:585:23:[m[K [01;31m[Kerror: [m[Kinvalid â€˜[01m[Kstatic_cast[m[Kâ€™ from type â€˜[01m[Kstd::__shared_ptr<void, __gnu_cxx::_S_atomic>::element_type*[m[Kâ€™ {aka â€˜[01m[Kvoid*[m[Kâ€™} to type â€˜[01m[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()[m[Kâ€™
  585 |       return _Sp(__r, [01;31m[Kstatic_cast<typename _Sp::element_type*>(__r.get())[m[K);
      |                       [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33[m[K,
                 from [01m[K/usr/include/c++/11/bits/allocator.h:46[m[K,
                 from [01m[K/usr/include/c++/11/memory:64[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/ext/new_allocator.h: In instantiation of â€˜[01m[K_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/alloc_traits.h:464:28:[m[K   required from â€˜[01m[Kstatic _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); std::allocator_traits<std::allocator<_Tp1> >::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; std::allocator_traits<std::allocator<_Tp1> >::size_type = long unsigned int][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:168:44:[m[K   required from â€˜[01m[Ktypename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared_impl(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with DestinationT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; typename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type = void; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:108:29:[m[K   required from â€˜[01m[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:106:8:[m[K   required from here
[01m[K/usr/include/c++/11/ext/new_allocator.h:124:20:[m[K [01;31m[Kerror: [m[Kinvalid â€˜[01m[Kstatic_cast[m[Kâ€™ from type â€˜[01m[Kvoid*[m[Kâ€™ to type â€˜[01m[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()[m[Kâ€™
  124 |             return [01;31m[Kstatic_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al))[m[K;
      |                    [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/ext/new_allocator.h:127:16:[m[K [01;31m[Kerror: [m[Kinvalid â€˜[01m[Kstatic_cast[m[Kâ€™ from type â€˜[01m[Kvoid*[m[Kâ€™ to type â€˜[01m[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()[m[Kâ€™
  127 |         return [01;31m[Kstatic_cast<_Tp*>(::operator new(__n * sizeof(_Tp)))[m[K;
      |                [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
/usr/include/c++/11/ext/new_allocator.h: In instantiation of â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = example_interfaces::msg::String_<std::allocator<void> >(); _Args = {example_interfaces::msg::String_<std::allocator<void> > (&)()}; _Tp = example_interfaces::msg::String_<std::allocator<void> >()][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = example_interfaces::msg::String_<std::allocator<void> >(); _Args = {example_interfaces::msg::String_<std::allocator<void> > (&)()}; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:169:34:[m[K   required from â€˜[01m[Ktypename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared_impl(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with DestinationT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; typename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type = void; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:108:29:[m[K   required from â€˜[01m[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:106:8:[m[K   required from here
[01m[K/usr/include/c++/11/ext/new_allocator.h:162:11:[m[K [01;31m[Kerror: [m[Knew cannot be applied to a function type
  162 |         { [01;31m[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)[m[K; }
      |           [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/c++/11/bits/stl_iterator.h:67[m[K,
                 from [01m[K/usr/include/c++/11/bits/stl_algobase.h:67[m[K,
                 from [01m[K/usr/include/c++/11/memory:63[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/bits/ptr_traits.h: In instantiation of â€˜[01m[Kconstexpr _Tp* std::__to_address(_Tp*) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >()][m[Kâ€™:
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:1191:29:[m[K   required from â€˜[01m[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::unique_ptr<_Up, _Ep>&&) [with _Yp = example_interfaces::msg::String_<std::allocator<void> >(); _Del = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; <template-parameter-2-3> = void; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr.h:341:36:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp>::shared_ptr(std::unique_ptr<_Up, _Ep>&&) [with _Yp = example_interfaces::msg::String_<std::allocator<void> >(); _Del = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; <template-parameter-2-3> = void; _Tp = example_interfaces::msg::String_<std::allocator<void> >()][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:113:21:[m[K   required from â€˜[01m[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_unique(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageUniquePtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageUniquePtr = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:111:8:[m[K   required from here
[01m[K/usr/include/c++/11/bits/ptr_traits.h:161:21:[m[K [01;31m[Kerror: [m[Kstatic assertion failed: not a function pointer
  161 |       static_assert([01;31m[K!std::is_function<_Tp>::value[m[K, "not a function pointer");
      |                     [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/bits/ptr_traits.h:161:21:[m[K [01;36m[Knote: [m[Kâ€˜[01m[K!(bool)std::integral_constant<bool, true>::value[m[Kâ€™ evaluates to false
In file included from [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:60[m[K,
                 from [01m[K/usr/include/c++/11/bits/shared_ptr.h:53[m[K,
                 from [01m[K/usr/include/c++/11/memory:77[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
                 from [01m[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1[m[K:
/usr/include/c++/11/ext/aligned_buffer.h: In instantiation of â€˜[01m[Kstruct __gnu_cxx::__aligned_buffer<example_interfaces::msg::String_<std::allocator<void> >()>[m[Kâ€™:
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:506:35:[m[K   required from â€˜[01m[Kclass std::_Sp_counted_ptr_inplace<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>, __gnu_cxx::_S_atomic>::_Impl[m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:567:13:[m[K   required from â€˜[01m[Kclass std::_Sp_counted_ptr_inplace<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>, __gnu_cxx::_S_atomic>[m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:647:43:[m[K   required from â€˜[01m[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:[m[K   required from â€˜[01m[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr.h:409:59:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; _Tp = example_interfaces::msg::String_<std::allocator<void> >()][m[Kâ€™
[01m[K/usr/include/c++/11/bits/shared_ptr.h:862:14:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/message_memory_strategy.hpp:87:56:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> rclcpp::message_memory_strategy::MessageMemoryStrategy<MessageT, Alloc>::borrow_message() [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/message_memory_strategy.hpp:85:37:[m[K   required from here
[01m[K/usr/include/c++/11/ext/aligned_buffer.h:91:28:[m[K [01;31m[Kerror: [m[Kcould not convert template argument â€˜[01m[Ksizeof (example_interfaces::msg::String_<std::allocator<void> >())[m[Kâ€™ from â€˜[01m[Klong unsigned int[m[Kâ€™ to â€˜[01m[Klong unsigned int[m[Kâ€™
   91 |     : std::aligned_storage<[01;31m[Ksizeof(_Tp)[m[K, __alignof__(_Tp)>
      |                            [01;31m[K^~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/ext/aligned_buffer.h:91:28:[m[K [01;31m[Kerror: [m[Kcould not convert template argument â€˜[01m[Ksizeof (example_interfaces::msg::String_<std::allocator<void> >())[m[Kâ€™ from â€˜[01m[Klong unsigned int[m[Kâ€™ to â€˜[01m[Klong unsigned int[m[Kâ€™
gmake[2]: *** [CMakeFiles/subscriber_test.dir/build.make:76: CMakeFiles/subscriber_test.dir/src/subscriber_test.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:193: CMakeFiles/subscriber_test.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
