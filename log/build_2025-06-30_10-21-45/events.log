[0.000000] (-) TimerEvent: {}
[0.000189] (my_cpp_pkg) JobQueued: {'identifier': 'my_cpp_pkg', 'dependencies': OrderedDict()}
[0.000345] (my_py_pkg) JobQueued: {'identifier': 'my_py_pkg', 'dependencies': OrderedDict()}
[0.000359] (my_cpp_pkg) JobStarted: {'identifier': 'my_cpp_pkg'}
[0.004243] (my_py_pkg) JobStarted: {'identifier': 'my_py_pkg'}
[0.008386] (my_cpp_pkg) JobProgress: {'identifier': 'my_cpp_pkg', 'progress': 'cmake'}
[0.008737] (my_cpp_pkg) JobProgress: {'identifier': 'my_cpp_pkg', 'progress': 'build'}
[0.009221] (my_cpp_pkg) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/abood/ros2_test/build/my_cpp_pkg', '--', '-j16', '-l16'], 'cwd': '/home/abood/ros2_test/build/my_cpp_pkg', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'abood'), ('LC_TIME', 'ar_EG.UTF-8'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/abood'), ('OLDPWD', '/home/abood/ros2_test/src'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'ar_EG.UTF-8'), ('MANAGERPID', '2103'), ('SYSTEMD_EXEC_PID', '2276'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('TERMINATOR_DBUS_NAME', 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '6106'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/abood/ros2_test/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'abood'), ('JOURNAL_STREAM', '8:19105'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'abood'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/abood/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/abood:@/tmp/.ICE-unix/2242,unix/abood:/tmp/.ICE-unix/2242'), ('INVOCATION_ID', '3b139645e9584d15b99c4f0402a80db4'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'ar_EG.UTF-8'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('TERMINATOR_DBUS_PATH', '/net/tenshu/Terminator2'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('IBUS_DISABLE_SNOOPER', '1'), ('LC_TELEPHONE', 'ar_EG.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.UCRZ82'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/abood/ros2_test/install/my_py_pkg:/home/abood/ros2_test/install/my_cpp_pkg:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'ar_EG.UTF-8'), ('TERMINATOR_UUID', 'urn:uuid:06fee33b-d21f-40d1-b6e6-f56eaf58a43f'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'ar_EG.UTF-8'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('LC_IDENTIFICATION', 'ar_EG.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/abood/ros2_test/build/my_cpp_pkg'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/abood/ros2_test/install/my_py_pkg/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'ar_EG.UTF-8'), ('LC_PAPER', 'ar_EG.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/abood/ros2_test/install/my_cpp_pkg:/home/abood/ros2_test/install/my_py_pkg:/opt/ros/humble')]), 'shell': False}
[0.024913] (my_cpp_pkg) StdoutLine: {'line': b'-- Found ament_cmake: 1.3.11 (/opt/ros/humble/share/ament_cmake/cmake)\n'}
[0.099892] (-) TimerEvent: {}
[0.104491] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rclcpp: 16.0.12 (/opt/ros/humble/share/rclcpp/cmake)\n'}
[0.124850] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rosidl_generator_c: 3.1.6 (/opt/ros/humble/share/rosidl_generator_c/cmake)\n'}
[0.126548] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rosidl_adapter: 3.1.6 (/opt/ros/humble/share/rosidl_adapter/cmake)\n'}
[0.130572] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rosidl_generator_cpp: 3.1.6 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)\n'}
[0.136994] (my_cpp_pkg) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c\n'}
[0.145272] (my_cpp_pkg) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp\n'}
[0.167274] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rmw_implementation_cmake: 6.1.2 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)\n'}
[0.168313] (my_cpp_pkg) StdoutLine: {'line': b'-- Found rmw_fastrtps_cpp: 6.2.7 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)\n'}
[0.199983] (-) TimerEvent: {}
[0.241263] (my_cpp_pkg) StdoutLine: {'line': b"-- Using RMW implementation 'rmw_fastrtps_cpp' as default\n"}
[0.272126] (my_cpp_pkg) StdoutLine: {'line': b'-- Found example_interfaces: 0.9.3 (/opt/ros/humble/share/example_interfaces/cmake)\n'}
[0.300067] (-) TimerEvent: {}
[0.338388] (my_cpp_pkg) StdoutLine: {'line': b'-- Configuring done\n'}
[0.351491] (my_cpp_pkg) StdoutLine: {'line': b'-- Generating done\n'}
[0.357304] (my_cpp_pkg) StdoutLine: {'line': b'-- Build files have been written to: /home/abood/ros2_test/build/my_cpp_pkg\n'}
[0.376518] (my_cpp_pkg) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target cpp_node\x1b[0m\n'}
[0.376650] (my_cpp_pkg) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target publisher_test\x1b[0m\n'}
[0.381590] (my_cpp_pkg) StdoutLine: {'line': b'[ 16%] \x1b[32mBuilding CXX object CMakeFiles/subscriber_test.dir/src/subscriber_test.cpp.o\x1b[0m\n'}
[0.386188] (my_cpp_pkg) StdoutLine: {'line': b'[ 66%] \x1b[32mBuilding CXX object CMakeFiles/publisher_test.dir/src/publisher_test.cpp.o\x1b[0m\n'}
[0.386315] (my_cpp_pkg) StdoutLine: {'line': b'[ 66%] Built target cpp_node\n'}
[0.400165] (-) TimerEvent: {}
[0.423065] (my_py_pkg) Command: {'cmd': ['/usr/bin/python3', '-W', 'ignore:setup.py install is deprecated', '-W', 'ignore:easy_install command is deprecated', 'setup.py', 'egg_info', '--egg-base', '../../build/my_py_pkg', 'build', '--build-base', '/home/abood/ros2_test/build/my_py_pkg/build', 'install', '--record', '/home/abood/ros2_test/build/my_py_pkg/install.log', '--single-version-externally-managed', 'install_data'], 'cwd': '/home/abood/ros2_test/src/my_py_pkg', 'env': {'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 'abood', 'LC_TIME': 'ar_EG.UTF-8', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib', 'HOME': '/home/abood', 'OLDPWD': '/home/abood/ros2_test/src', 'DESKTOP_SESSION': 'ubuntu', 'GIO_LAUNCHED_DESKTOP_FILE': '/usr/share/applications/terminator.desktop', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'LC_MONETARY': 'ar_EG.UTF-8', 'MANAGERPID': '2103', 'SYSTEMD_EXEC_PID': '2276', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'COLORTERM': 'truecolor', 'TERMINATOR_DBUS_NAME': 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '6106', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'COLCON_PREFIX_PATH': '/home/abood/ros2_test/install', 'ROS_DISTRO': 'humble', 'LOGNAME': 'abood', 'JOURNAL_STREAM': '8:19105', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 'abood', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'ROS_LOCALHOST_ONLY': '0', 'PATH': '/opt/ros/humble/bin:/home/abood/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/abood:@/tmp/.ICE-unix/2242,unix/abood:/tmp/.ICE-unix/2242', 'INVOCATION_ID': '3b139645e9584d15b99c4f0402a80db4', 'XDG_MENU_PREFIX': 'gnome-', 'LC_ADDRESS': 'ar_EG.UTF-8', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'TERMINATOR_DBUS_PATH': '/net/tenshu/Terminator2', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'IBUS_DISABLE_SNOOPER': '1', 'LC_TELEPHONE': 'ar_EG.UTF-8', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.UCRZ82', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'SSH_AGENT_LAUNCHER': 'gnome-keyring', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'AMENT_PREFIX_PATH': '/home/abood/ros2_test/install/my_py_pkg:/home/abood/ros2_test/install/my_cpp_pkg:/opt/ros/humble', 'SHELL': '/bin/bash', 'LC_NAME': 'ar_EG.UTF-8', 'TERMINATOR_UUID': 'urn:uuid:06fee33b-d21f-40d1-b6e6-f56eaf58a43f', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LC_MEASUREMENT': 'ar_EG.UTF-8', 'GJS_DEBUG_OUTPUT': 'stderr', 'LC_IDENTIFICATION': 'ar_EG.UTF-8', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/abood/ros2_test/build/my_py_pkg', 'LC_ALL': 'en_US.UTF-8', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'PYTHONPATH': '/home/abood/ros2_test/build/my_py_pkg/prefix_override:/usr/lib/python3/dist-packages/colcon_core/task/python/colcon_distutils_commands:/home/abood/ros2_test/install/my_py_pkg/lib/python3.10/site-packages:/home/abood/ros2_test/install/my_py_pkg/lib/python3.10/site-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages', 'LC_NUMERIC': 'ar_EG.UTF-8', 'LC_PAPER': 'ar_EG.UTF-8', 'COLCON': '1', 'VTE_VERSION': '6800', 'CMAKE_PREFIX_PATH': '/home/abood/ros2_test/install/my_cpp_pkg'}, 'shell': False}
[0.500235] (-) TimerEvent: {}
[0.597606] (my_py_pkg) StdoutLine: {'line': b'running egg_info\n'}
[0.597940] (my_py_pkg) StdoutLine: {'line': b'writing ../../build/my_py_pkg/my_py_pkg.egg-info/PKG-INFO\n'}
[0.598065] (my_py_pkg) StdoutLine: {'line': b'writing dependency_links to ../../build/my_py_pkg/my_py_pkg.egg-info/dependency_links.txt\n'}
[0.598156] (my_py_pkg) StdoutLine: {'line': b'writing entry points to ../../build/my_py_pkg/my_py_pkg.egg-info/entry_points.txt\n'}
[0.598319] (my_py_pkg) StdoutLine: {'line': b'writing requirements to ../../build/my_py_pkg/my_py_pkg.egg-info/requires.txt\n'}
[0.598364] (my_py_pkg) StdoutLine: {'line': b'writing top-level names to ../../build/my_py_pkg/my_py_pkg.egg-info/top_level.txt\n'}
[0.599516] (my_py_pkg) StdoutLine: {'line': b"reading manifest file '../../build/my_py_pkg/my_py_pkg.egg-info/SOURCES.txt'\n"}
[0.600113] (my_py_pkg) StdoutLine: {'line': b"writing manifest file '../../build/my_py_pkg/my_py_pkg.egg-info/SOURCES.txt'\n"}
[0.600157] (my_py_pkg) StdoutLine: {'line': b'running build\n'}
[0.600196] (my_py_pkg) StdoutLine: {'line': b'running build_py\n'}
[0.600232] (-) TimerEvent: {}
[0.600422] (my_py_pkg) StdoutLine: {'line': b'running install\n'}
[0.600614] (my_py_pkg) StdoutLine: {'line': b'running install_lib\n'}
[0.601558] (my_py_pkg) StdoutLine: {'line': b'running install_data\n'}
[0.601598] (my_py_pkg) StdoutLine: {'line': b'running install_egg_info\n'}
[0.602790] (my_py_pkg) StdoutLine: {'line': b"removing '/home/abood/ros2_test/install/my_py_pkg/lib/python3.10/site-packages/my_py_pkg-0.0.0-py3.10.egg-info' (and everything under it)\n"}
[0.603013] (my_py_pkg) StdoutLine: {'line': b'Copying ../../build/my_py_pkg/my_py_pkg.egg-info to /home/abood/ros2_test/install/my_py_pkg/lib/python3.10/site-packages/my_py_pkg-0.0.0-py3.10.egg-info\n'}
[0.603471] (my_py_pkg) StdoutLine: {'line': b'running install_scripts\n'}
[0.617815] (my_py_pkg) StdoutLine: {'line': b'Installing publisher_test script to /home/abood/ros2_test/install/my_py_pkg/lib/my_py_pkg\n'}
[0.617923] (my_py_pkg) StdoutLine: {'line': b'Installing py_node script to /home/abood/ros2_test/install/my_py_pkg/lib/my_py_pkg\n'}
[0.617984] (my_py_pkg) StdoutLine: {'line': b'Installing subsrciber_test script to /home/abood/ros2_test/install/my_py_pkg/lib/my_py_pkg\n'}
[0.618095] (my_py_pkg) StdoutLine: {'line': b"writing list of installed files to '/home/abood/ros2_test/build/my_py_pkg/install.log'\n"}
[0.634722] (my_py_pkg) CommandEnded: {'returncode': 0}
[0.641434] (my_py_pkg) JobEnded: {'identifier': 'my_py_pkg', 'rc': 0}
[0.700419] (-) TimerEvent: {}
[0.800757] (-) TimerEvent: {}
[0.901093] (-) TimerEvent: {}
[1.001476] (-) TimerEvent: {}
[1.101806] (-) TimerEvent: {}
[1.202104] (-) TimerEvent: {}
[1.302391] (-) TimerEvent: {}
[1.402668] (-) TimerEvent: {}
[1.502970] (-) TimerEvent: {}
[1.603339] (-) TimerEvent: {}
[1.703668] (-) TimerEvent: {}
[1.803984] (-) TimerEvent: {}
[1.872627] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33\x1b[m\x1b[K,\n'}
[1.872791] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/allocator.h:46\x1b[m\x1b[K,\n'}
[1.872831] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:64\x1b[m\x1b[K,\n'}
[1.872866] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[1.872899] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[1.872932] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/ext/new_allocator.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kclass __gnu_cxx::new_allocator<example_interfaces::msg::String_<std::allocator<void> >()>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.872967] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/allocator.h:124:11:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.873000] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:995:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.873033] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:425:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.873065] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:22:56:\x1b[m\x1b[K   required from here\n'}
[1.873097] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:96:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst _Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::const_reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::const_pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::const_reference = example_interfaces::msg::String_<std::allocator<void> > (&)()]\x1b[m\x1b[K\xe2\x80\x99 cannot be overloaded with \xe2\x80\x98\x1b[01m\x1b[K_Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::reference = example_interfaces::msg::String_<std::allocator<void> > (&)()]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.873136] (my_cpp_pkg) StderrLine: {'line': b'   96 |       \x1b[01;31m\x1b[Kaddress\x1b[m\x1b[K(const_reference __x) const _GLIBCXX_NOEXCEPT\n'}
[1.873168] (my_cpp_pkg) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[1.873218] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:92:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kprevious declaration \xe2\x80\x98\x1b[01m\x1b[K_Tp* __gnu_cxx::new_allocator<_Tp>::address(__gnu_cxx::new_allocator<_Tp>::reference) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); __gnu_cxx::new_allocator<_Tp>::reference = example_interfaces::msg::String_<std::allocator<void> > (&)()]\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.873257] (my_cpp_pkg) StderrLine: {'line': b'   92 |       \x1b[01;36m\x1b[Kaddress\x1b[m\x1b[K(reference __x) const _GLIBCXX_NOEXCEPT\n'}
[1.873289] (my_cpp_pkg) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~\x1b[m\x1b[K\n'}
[1.904103] (-) TimerEvent: {}
[2.004445] (-) TimerEvent: {}
[2.104794] (-) TimerEvent: {}
[2.164207] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[2.164582] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[2.164640] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[2.164678] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[2.164714] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[2.164750] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[2.164785] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[2.164820] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.164855] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.164889] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.164937] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[2.164973] (my_cpp_pkg) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.165132] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.165175] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.165447] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.165505] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.165545] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.165580] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[2.165633] (my_cpp_pkg) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[2.165667] (my_cpp_pkg) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.165699] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[2.165732] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[2.165762] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[2.165793] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[2.165824] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[2.165856] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[2.165889] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[2.165920] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.165952] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.165984] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.166015] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[2.166047] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166100] (my_cpp_pkg) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[2.166133] (my_cpp_pkg) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.166165] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.166204] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.166256] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166340] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166376] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166414] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166454] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166490] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166526] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.166559] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166592] (my_cpp_pkg) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[2.166626] (my_cpp_pkg) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.166657] (my_cpp_pkg) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.166693] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166727] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166763] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166801] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166838] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.166869] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.166912] (my_cpp_pkg) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[2.166943] (my_cpp_pkg) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.166974] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.167017] (my_cpp_pkg) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[2.167049] (my_cpp_pkg) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.167081] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.167122] (my_cpp_pkg) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[2.167153] (my_cpp_pkg) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.167187] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<example_interfaces::msg::String_<std::allocator<void> >(), std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.167233] (my_cpp_pkg) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[2.167265] (my_cpp_pkg) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[2.204911] (-) TimerEvent: {}
[2.305252] (-) TimerEvent: {}
[2.405550] (-) TimerEvent: {}
[2.488924] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/variant: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool std::holds_alternative(const std::variant<_Types ...>&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.489213] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:938:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489266] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_intra_process_buffer_type.hpp:40:57:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::IntraProcessBufferType rclcpp::detail::resolve_intra_process_buffer_type(rclcpp::IntraProcessBufferType, const rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>&) [with CallbackMessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489304] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:218:42:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489346] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489386] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489426] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:\x1b[m\x1b[K   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[2.489461] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489507] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489547] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489585] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489623] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.489660] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.489694] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1111:42:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: T must occur exactly once in alternatives\n'}
[2.489728] (my_cpp_pkg) StderrLine: {'line': b' 1111 |       static_assert(\x1b[01;31m\x1b[K__detail::__variant::__exactly_once<_Tp, _Types...>\x1b[m\x1b[K,\n'}
[2.489761] (my_cpp_pkg) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.489793] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1111:42:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::__detail::__variant::__exactly_once<std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[2.490647] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/variant: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool std::holds_alternative(const std::variant<_Types ...>&) [with _Tp = std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>; _Types = {std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.490738] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:939:61:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr bool rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::use_take_shared_method() const [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.490779] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_intra_process_buffer_type.hpp:40:57:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::IntraProcessBufferType rclcpp::detail::resolve_intra_process_buffer_type(rclcpp::IntraProcessBufferType, const rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>&) [with CallbackMessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.490816] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:218:42:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::Subscription(rclcpp::node_interfaces::NodeBaseInterface*, const rosidl_message_type_support_t&, const string&, const rclcpp::QoS&, rclcpp::AnySubscriptionCallback<CallbackMessageT, AllocatorT>, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; rosidl_message_type_support_t = rosidl_message_type_support_t; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >; rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::SubscriptionTopicStatisticsSharedPtr = std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.490862] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:4:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.490900] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; _Tp = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.490939] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:\x1b[m\x1b[K   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[2.490972] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.491015] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.491061] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.491101] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.491140] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.491178] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.491218] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1111:42:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: T must occur exactly once in alternatives\n'}
[2.491253] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1111:42:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kstd::__detail::__variant::__exactly_once<std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)())>, std::function<void(example_interfaces::msg::String_<std::allocator<void> > (&)(), const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >)>, std::function<void(std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&)>, std::function<void(const std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>)>, std::function<void(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[2.505624] (-) TimerEvent: {}
[2.605931] (-) TimerEvent: {}
[2.706251] (-) TimerEvent: {}
[2.754797] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:76\x1b[m\x1b[K,\n'}
[2.754961] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[2.755021] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[2.755057] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/bits/unique_ptr.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = example_interfaces::msg::String_<std::allocator<void> >()]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.755103] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/unique_ptr.h:361:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Dp = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755139] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/stl_construct.h:151:22:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void std::_Destroy(_Tp*) [with _Tp = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755178] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/stl_construct.h:163:19:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*; bool <anonymous> = false]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755223] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/stl_construct.h:196:11:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755257] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:848:15:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >*; _Tp = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755294] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/stl_vector.h:680:15:\x1b[m\x1b[K   [ skipping 23 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[2.755328] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:110:3:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic std::shared_ptr<rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT> > rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::make_shared(Args&& ...) [with Args = {rclcpp::node_interfaces::NodeBaseInterface*&, const rosidl_message_type_support_t&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const rclcpp::QoS&, const rclcpp::AnySubscriptionCallback<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >&, const rclcpp::SubscriptionOptionsWithAllocator<std::allocator<void> >&, const std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >&, const std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<example_interfaces::msg::String_<std::allocator<void> >()> >&}; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755370] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:107:65:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755409] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = example_interfaces::msg::String_<std::allocator<void> >(); std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755448] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755485] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); CallbackT = std::_Bind<void (SubscriberTest::*(SubscriberTest*, std::_Placeholder<1>))(std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<example_interfaces::msg::String_<std::allocator<void> >()>; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755523] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:12:83:\x1b[m\x1b[K   required from here\n'}
[2.755556] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/unique_ptr.h:85:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcannot delete a function.  Only pointer-to-objects are valid arguments to \xe2\x80\x98\x1b[01m\x1b[Kdelete\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.755589] (my_cpp_pkg) StderrLine: {'line': b'   85 |         delete \x1b[01;31m\x1b[K__ptr\x1b[m\x1b[K;\n'}
[2.755621] (my_cpp_pkg) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~\x1b[m\x1b[K\n'}
[2.806427] (-) TimerEvent: {}
[2.906757] (-) TimerEvent: {}
[3.007094] (-) TimerEvent: {}
[3.055769] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:25\x1b[m\x1b[K,\n'}
[3.055931] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.055972] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.056006] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.056039] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.056072] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.056106] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.056139] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.056171] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[3.056212] (my_cpp_pkg) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<void> rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::create_message() [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.056251] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:311:3:\x1b[m\x1b[K   required from here\n'}
[3.056284] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:317:53:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcould not convert \xe2\x80\x98\x1b[01m\x1b[Krclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >::borrow_message()\x1b[m\x1b[K\xe2\x80\x99 from \xe2\x80\x98\x1b[01m\x1b[Kshared_ptr<\x1b[01;32m\x1b[Kexample_interfaces::msg::String_<std::allocator<void> >()\x1b[m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kshared_ptr<\x1b[01;32m\x1b[Kvoid\x1b[m\x1b[K>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.056318] (my_cpp_pkg) StderrLine: {'line': b'  317 |     return message_memory_strategy_->borrow_message(\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[3.056350] (my_cpp_pkg) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[3.056380] (my_cpp_pkg) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[K|\x1b[m\x1b[K\n'}
[3.056412] (my_cpp_pkg) StderrLine: {'line': b'      |                                                     \x1b[01;31m\x1b[Kshared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>\x1b[m\x1b[K\n'}
[3.057380] (my_cpp_pkg) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_loaned_message(void*, const rclcpp::MessageInfo&) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.057458] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:364:3:\x1b[m\x1b[K   required from here\n'}
[3.057497] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:374:26:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid \xe2\x80\x98\x1b[01m\x1b[Kstatic_cast\x1b[m\x1b[K\xe2\x80\x99 from type \xe2\x80\x98\x1b[01m\x1b[Kvoid*\x1b[m\x1b[K\xe2\x80\x99 to type \xe2\x80\x98\x1b[01m\x1b[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.057534] (my_cpp_pkg) StderrLine: {'line': b'  374 |     auto typed_message = \x1b[01;31m\x1b[Kstatic_cast<ROSMessageType *>(loaned_message)\x1b[m\x1b[K;\n'}
[3.057567] (my_cpp_pkg) StderrLine: {'line': b'      |                          \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.073025] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[3.073154] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[3.073213] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[3.073256] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::static_pointer_cast(const std::shared_ptr<_Tp>&) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Up = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.073294] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:336:66:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::Subscription<MessageT, AllocatorT, SubscribedT, ROSMessageT, MessageMemoryStrategyT>::handle_message(std::shared_ptr<void>&, const rclcpp::MessageInfo&) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); AllocatorT = std::allocator<void>; SubscribedT = example_interfaces::msg::String_<std::allocator<void> >(); ROSMessageT = example_interfaces::msg::String_<std::allocator<void> >(); MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.073330] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription.hpp:327:3:\x1b[m\x1b[K   required from here\n'}
[3.073365] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:585:23:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid \xe2\x80\x98\x1b[01m\x1b[Kstatic_cast\x1b[m\x1b[K\xe2\x80\x99 from type \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_ptr<void, __gnu_cxx::_S_atomic>::element_type*\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kvoid*\x1b[m\x1b[K\xe2\x80\x99} to type \xe2\x80\x98\x1b[01m\x1b[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.073399] (my_cpp_pkg) StderrLine: {'line': b'  585 |       return _Sp(__r, \x1b[01;31m\x1b[Kstatic_cast<typename _Sp::element_type*>(__r.get())\x1b[m\x1b[K);\n'}
[3.073430] (my_cpp_pkg) StderrLine: {'line': b'      |                       \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.107253] (-) TimerEvent: {}
[3.125709] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33\x1b[m\x1b[K,\n'}
[3.125924] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/allocator.h:46\x1b[m\x1b[K,\n'}
[3.125968] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:64\x1b[m\x1b[K,\n'}
[3.126004] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[3.126040] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[3.126075] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/ext/new_allocator.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[K_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::new_allocator<_Tp>::size_type = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.126112] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:464:28:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); std::allocator_traits<std::allocator<_Tp1> >::pointer = example_interfaces::msg::String_<std::allocator<void> > (*)(); std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; std::allocator_traits<std::allocator<_Tp1> >::size_type = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126160] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:168:44:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared_impl(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with DestinationT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; typename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type = void; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126212] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:108:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126254] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:106:8:\x1b[m\x1b[K   required from here\n'}
[3.126289] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:124:20:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid \xe2\x80\x98\x1b[01m\x1b[Kstatic_cast\x1b[m\x1b[K\xe2\x80\x99 from type \xe2\x80\x98\x1b[01m\x1b[Kvoid*\x1b[m\x1b[K\xe2\x80\x99 to type \xe2\x80\x98\x1b[01m\x1b[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126325] (my_cpp_pkg) StderrLine: {'line': b'  124 |             return \x1b[01;31m\x1b[Kstatic_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al))\x1b[m\x1b[K;\n'}
[3.126361] (my_cpp_pkg) StderrLine: {'line': b'      |                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.126396] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:127:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid \xe2\x80\x98\x1b[01m\x1b[Kstatic_cast\x1b[m\x1b[K\xe2\x80\x99 from type \xe2\x80\x98\x1b[01m\x1b[Kvoid*\x1b[m\x1b[K\xe2\x80\x99 to type \xe2\x80\x98\x1b[01m\x1b[Kexample_interfaces::msg::String_<std::allocator<void> > (*)()\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126433] (my_cpp_pkg) StderrLine: {'line': b'  127 |         return \x1b[01;31m\x1b[Kstatic_cast<_Tp*>(::operator new(__n * sizeof(_Tp)))\x1b[m\x1b[K;\n'}
[3.126467] (my_cpp_pkg) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.126501] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/ext/new_allocator.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = example_interfaces::msg::String_<std::allocator<void> >(); _Args = {example_interfaces::msg::String_<std::allocator<void> > (&)()}; _Tp = example_interfaces::msg::String_<std::allocator<void> >()]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.126539] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = example_interfaces::msg::String_<std::allocator<void> >(); _Args = {example_interfaces::msg::String_<std::allocator<void> > (&)()}; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126576] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:169:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared_impl(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with DestinationT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; typename std::enable_if<std::is_same<DestinationT, std::unique_ptr<MessageT, MessageDeleter> >::value>::type = void; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126625] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:108:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_shared(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageSharedPtr = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.126665] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:106:8:\x1b[m\x1b[K   required from here\n'}
[3.126701] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Knew cannot be applied to a function type\n'}
[3.126735] (my_cpp_pkg) StderrLine: {'line': b'  162 |         { \x1b[01;31m\x1b[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)\x1b[m\x1b[K; }\n'}
[3.126769] (my_cpp_pkg) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.127402] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_iterator.h:67\x1b[m\x1b[K,\n'}
[3.127478] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_algobase.h:67\x1b[m\x1b[K,\n'}
[3.127519] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:63\x1b[m\x1b[K,\n'}
[3.127556] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[3.127592] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[3.127628] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/bits/ptr_traits.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr _Tp* std::__to_address(_Tp*) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >()]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.127665] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:1191:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::unique_ptr<_Up, _Ep>&&) [with _Yp = example_interfaces::msg::String_<std::allocator<void> >(); _Del = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; <template-parameter-2-3> = void; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.127709] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:341:36:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>::shared_ptr(std::unique_ptr<_Up, _Ep>&&) [with _Yp = example_interfaces::msg::String_<std::allocator<void> >(); _Del = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; <template-parameter-2-3> = void; _Tp = example_interfaces::msg::String_<std::allocator<void> >()]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.127746] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:113:21:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::add_unique(rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageUniquePtr) [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; MessageDeleter = std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()>; BufferT = std::shared_ptr<example_interfaces::msg::String_<std::allocator<void> >()>; rclcpp::experimental::buffers::TypedIntraProcessBuffer<MessageT, Alloc, MessageDeleter, BufferT>::MessageUniquePtr = std::unique_ptr<example_interfaces::msg::String_<std::allocator<void> >(), std::default_delete<example_interfaces::msg::String_<std::allocator<void> >()> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.127788] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/experimental/buffers/intra_process_buffer.hpp:111:8:\x1b[m\x1b[K   required from here\n'}
[3.127827] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/ptr_traits.h:161:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: not a function pointer\n'}
[3.127865] (my_cpp_pkg) StderrLine: {'line': b'  161 |       static_assert(\x1b[01;31m\x1b[K!std::is_function<_Tp>::value\x1b[m\x1b[K, "not a function pointer");\n'}
[3.127902] (my_cpp_pkg) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.127937] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/ptr_traits.h:161:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K!(bool)std::integral_constant<bool, true>::value\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[3.154864] (my_cpp_pkg) StdoutLine: {'line': b'[ 83%] \x1b[32m\x1b[1mLinking CXX executable publisher_test\x1b[0m\n'}
[3.177895] (my_cpp_pkg) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:60\x1b[m\x1b[K,\n'}
[3.178058] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:53\x1b[m\x1b[K,\n'}
[3.178104] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[3.178139] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[3.178172] (my_cpp_pkg) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/abood/ros2_test/src/my_cpp_pkg/src/subscriber_test.cpp:1\x1b[m\x1b[K:\n'}
[3.178214] (my_cpp_pkg) StderrLine: {'line': b'/usr/include/c++/11/ext/aligned_buffer.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct __gnu_cxx::__aligned_buffer<example_interfaces::msg::String_<std::allocator<void> >()>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.178251] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:506:35:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass std::_Sp_counted_ptr_inplace<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>, __gnu_cxx::_S_atomic>::_Impl\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178285] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:567:13:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kclass std::_Sp_counted_ptr_inplace<example_interfaces::msg::String_<std::allocator<void> >(), std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>, __gnu_cxx::_S_atomic>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178318] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:647:43:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178351] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; _Tp = example_interfaces::msg::String_<std::allocator<void> >(); __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178391] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:409:59:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}; _Tp = example_interfaces::msg::String_<std::allocator<void> >()]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178425] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:862:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = example_interfaces::msg::String_<std::allocator<void> >(); _Alloc = std::allocator<example_interfaces::msg::String_<std::allocator<void> >()>; _Args = {}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178461] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/message_memory_strategy.hpp:87:56:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> rclcpp::message_memory_strategy::MessageMemoryStrategy<MessageT, Alloc>::borrow_message() [with MessageT = example_interfaces::msg::String_<std::allocator<void> >(); Alloc = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178494] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/message_memory_strategy.hpp:85:37:\x1b[m\x1b[K   required from here\n'}
[3.178526] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/aligned_buffer.h:91:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcould not convert template argument \xe2\x80\x98\x1b[01m\x1b[Ksizeof (example_interfaces::msg::String_<std::allocator<void> >())\x1b[m\x1b[K\xe2\x80\x99 from \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.178561] (my_cpp_pkg) StderrLine: {'line': b'   91 |     : std::aligned_storage<\x1b[01;31m\x1b[Ksizeof(_Tp)\x1b[m\x1b[K, __alignof__(_Tp)>\n'}
[3.178594] (my_cpp_pkg) StderrLine: {'line': b'      |                            \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.178628] (my_cpp_pkg) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/aligned_buffer.h:91:28:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcould not convert template argument \xe2\x80\x98\x1b[01m\x1b[Ksizeof (example_interfaces::msg::String_<std::allocator<void> >())\x1b[m\x1b[K\xe2\x80\x99 from \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Klong unsigned int\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.207349] (-) TimerEvent: {}
[3.272411] (my_cpp_pkg) StdoutLine: {'line': b'[ 83%] Built target publisher_test\n'}
[3.307440] (-) TimerEvent: {}
[3.407711] (-) TimerEvent: {}
[3.418538] (my_cpp_pkg) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/subscriber_test.dir/build.make:76: CMakeFiles/subscriber_test.dir/src/subscriber_test.cpp.o] Error 1\n'}
[3.418669] (my_cpp_pkg) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:193: CMakeFiles/subscriber_test.dir/all] Error 2\n'}
[3.418726] (my_cpp_pkg) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[3.420394] (my_cpp_pkg) CommandEnded: {'returncode': 2}
[3.424484] (my_cpp_pkg) JobEnded: {'identifier': 'my_cpp_pkg', 'rc': 2}
[3.438594] (-) EventReactorShutdown: {}
